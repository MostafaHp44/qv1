{"ast":null,"code":"var _jsxFileName = \"E:\\\\Qaseribrim\\\\qaseribrim\\\\src\\\\Components\\\\2-AnimationtText\\\\AnimationText.js\",\n  _s = $RefreshSig$();\nimport './Animation.css';\nimport TextTransition, { presets } from 'react-text-transition';\nimport { React, useEffect, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnimationText = () => {\n  _s();\n  const [ArabicText, setArabicText] = useState(0);\n  const [EnglishText, setEnglishText] = useState(0);\n  const TEXTA = ['Forest', 'Building', 'Tree', 'Color'];\n  const TEXTE = ['Forest', 'Building', 'Tree', 'Color'];\n  useEffect(() => {\n    const intervalArabic = setInterval(() => setArabicText(index => index + 1), 3000 // every 3 seconds\n    );\n\n    const intervalEnglish = setInterval(() => setArabixText(index => index + 1));\n    return () => clearTimeout(intervalArabic, intervalEnglish);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MainAnimationText\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"WelcomText\",\n      children: [/*#__PURE__*/_jsxDEV(TextTransition, {\n        springConfig: presets.stiff,\n        children: TEXTA[ArabicText % TEXTA.length]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextTransition, {\n        springConfig: presets.stiff,\n        children: TEXTE[EnglishText % TEXTE.length]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(AnimationText, \"TLeFfRTZlmOEH7hXmZnGZdCUzow=\");\n_c = AnimationText;\nexport default AnimationText;\nvar _c;\n$RefreshReg$(_c, \"AnimationText\");","map":{"version":3,"names":["TextTransition","presets","React","useEffect","useState","useCallback","jsxDEV","_jsxDEV","AnimationText","_s","ArabicText","setArabicText","EnglishText","setEnglishText","TEXTA","TEXTE","intervalArabic","setInterval","index","intervalEnglish","setArabixText","clearTimeout","className","children","springConfig","stiff","length","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Qaseribrim/qaseribrim/src/Components/2-AnimationtText/AnimationText.js"],"sourcesContent":["import './Animation.css'\r\nimport TextTransition, { presets } from 'react-text-transition';\r\nimport {React,useEffect,useState,useCallback} from 'react'\r\n\r\n\r\nconst AnimationText = () => {\r\n    const [ArabicText, setArabicText] = useState(0);\r\n    const [EnglishText, setEnglishText] = useState(0);\r\n\r\n\r\n    const TEXTA = ['Forest', 'Building', 'Tree', 'Color'];\r\n    const TEXTE = ['Forest', 'Building', 'Tree', 'Color'];\r\n\r\n    useEffect(() => {\r\n        const intervalArabic = setInterval(\r\n          () => setArabicText((index) => index + 1),\r\n          3000, // every 3 seconds\r\n        );\r\n        const intervalEnglish=setInterval(()=>setArabixText((index)=>index+1))\r\n        return () => clearTimeout(intervalArabic,intervalEnglish);\r\n      }, []);\r\n    return (\r\n    <div className=\"MainAnimationText\">\r\n        <span className='WelcomText'>\r\n        <TextTransition springConfig={presets.stiff}>{TEXTA[ArabicText % TEXTA.length]}</TextTransition>\r\n        <TextTransition springConfig={presets.stiff}>{TEXTE[EnglishText % TEXTE.length]}</TextTransition>\r\n\r\n        </span>\r\n    </div>\r\n    );\r\n}\r\n \r\nexport default AnimationText;"],"mappings":";;AAAA,OAAO,iBAAiB;AACxB,OAAOA,cAAc,IAAIC,OAAO,QAAQ,uBAAuB;AAC/D,SAAQC,KAAK,EAACC,SAAS,EAACC,QAAQ,EAACC,WAAW,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG1D,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAGjD,MAAMU,KAAK,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC;EACrD,MAAMC,KAAK,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC;EAErDZ,SAAS,CAAC,MAAM;IACZ,MAAMa,cAAc,GAAGC,WAAW,CAChC,MAAMN,aAAa,CAAEO,KAAK,IAAKA,KAAK,GAAG,CAAC,CAAC,EACzC,IAAI,CAAE;IACR,CAAC;;IACD,MAAMC,eAAe,GAACF,WAAW,CAAC,MAAIG,aAAa,CAAEF,KAAK,IAAGA,KAAK,GAAC,CAAC,CAAC,CAAC;IACtE,OAAO,MAAMG,YAAY,CAACL,cAAc,EAACG,eAAe,CAAC;EAC3D,CAAC,EAAE,EAAE,CAAC;EACR,oBACAZ,OAAA;IAAKe,SAAS,EAAC,mBAAmB;IAAAC,QAAA,eAC9BhB,OAAA;MAAMe,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5BhB,OAAA,CAACP,cAAc;QAACwB,YAAY,EAAEvB,OAAO,CAACwB,KAAM;QAAAF,QAAA,EAAET,KAAK,CAACJ,UAAU,GAAGI,KAAK,CAACY,MAAM;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAAC,eAChGvB,OAAA,CAACP,cAAc;QAACwB,YAAY,EAAEvB,OAAO,CAACwB,KAAM;QAAAF,QAAA,EAAER,KAAK,CAACH,WAAW,GAAGG,KAAK,CAACW,MAAM;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE3F;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAArB,EAAA,CAzBKD,aAAa;AAAAuB,EAAA,GAAbvB,aAAa;AA2BnB,eAAeA,aAAa;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}